Explain the concept of recursion and how it can simplify certain problems.
    Concept of Recursion:
        	Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem.
        	A recursive function calls itself to solve smaller subproblems.
        	Base Case: The condition under which the recursion ends.
        	Recursive Case: The part of the function where the function calls itself with a smaller problem.
    Benefits of Recursion:
        	Simplifies code for problems that have a natural recursive structure (e.g., tree traversal, factorial computation).
        	Can be more intuitive for certain problems by breaking them into smaller, more manageable parts.

Discuss the time complexity of your recursive algorithm.
          Time Complexity:    
               The time complexity of this recursive algorithm is ùëÇ(ùëõ), where ùëõ is the number of periods.
              	 Each call to calculateFutureValue() makes exactly one more call until it reaches the base case.
    
    Explain how to optimize the recursive solution to avoid excessive computation
          Optimization to Avoid Excessive Computation:
               Recursion can lead to excessive computation and stack overflow if the depth of recursion is too large.
               Memorization: Store the results of previous computations to avoid redundant calculations. This transforms the algorithm into a dynamic programming approach. 
